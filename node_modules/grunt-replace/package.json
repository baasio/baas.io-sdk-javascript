{
  "name": "grunt-replace",
  "version": "0.4.0",
  "description": "Grunt task to replace inline patterns with custom variables.",
  "homepage": "http://github.com/outaTiME/grunt-replace",
  "author": {
    "name": "outaTiME",
    "url": "http://outa.im/"
  },
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/outaTiME/grunt-replace.git"
  },
  "bugs": {
    "url": "http://github.com/outaTiME/grunt-replace/issues"
  },
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt-lib-contrib": "~0.3.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-clean": "~0.4.0rc6",
    "grunt-contrib-jshint": "~0.1.0",
    "grunt-contrib-nodeunit": "~0.1.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-replace [![Build Status](https://secure.travis-ci.org/outaTiME/grunt-replace.png?branch=master)](http://travis-ci.org/outaTiME/grunt-replace)\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-replace`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-replace');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n### Overview\n\nInside your `grunt.js` file add a section named `replace`. This section specifies the files to replace.\n\n#### Parameters\n\n##### files ```object```\n\nThis defines what files this task will copy and should contain key:value pairs.\n\nThe key (destination) should be an unique path (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\n\nAs of v0.3.0, when copying to a directory you must add a trailing slash to the destination due to added support of single file copy.\n\n##### options ```object```\n\nThis controls how this task operates and should contain key:value pairs, see options below.\n\n#### Options\n\n##### variables ```object```\n\nThis option is used to define patterns that will be used to replace the contents of source files.\n\n```javascript\noptions: {\n  variables: {\n    'foo': 'bar'\n  }\n}\n```\n\n##### prefix ```string```\n\nThis option is used to create the real pattern for lookup in source files (Defaults `@@`).\n\n##### basePath ```string```\n\nThis option adjusts the folder structure when copied to the destination directory. When not explicitly set, best effort is made to locate the basePath by comparing all source filepaths left to right for a common pattern.\n\n##### flatten ```boolean```\n\nThis option performs a flat copy that dumps all the files into the root of the destination directory, overwriting files if they exist.\n\n##### minimatch ```object```\n\nThese options will be forwarded on to expandFiles, as referenced in the [minimatch options section](https://github.com/isaacs/minimatch/#options)\n\n##### force ```boolean```\n\nThis option force the copy of files even when those files don't have any replace token. Useful when copying a directory.\n\n#### Config Example\n\n```javascript\nreplace: {\n  dist: {\n    options: {\n      variables: {\n        'key': 'value'\n      },\n      prefix: '@@'\n    },\n    files: {\n      'tmp/': ['test/fixtures/dist.txt']\n    }\n  }\n}\n```\n\n#### Example usage\n\n##### Variable pattern in source\n\nDefine the place where variable will be injected:\n\n```\n// build/manifest.appcache\n\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\n##### Gruntfile\n\nDefine timestamp variable and destination of the source files:\n\n```javascript\nreplace: {\n  dist: {\n    options: {\n      variables: {\n        'timestamp': '<%= grunt.template.today() %>'\n      }\n    },\n    files: {\n      'public/': ['build/manifest.appcache']\n    }\n  }\n}\n```\n\n#### Usage variations\n\n##### Replace over source files (deploy in one target)\n\n```javascript\nreplace: {\n  dist: {\n    options: {\n      variables: {\n        version: '<%= pkg.version %>',\n        timestamp: '<%= grunt.template.today() %>'\n      }\n    },\n    files: {\n      'public/': [\n        'build/manifest.appcache',\n        'build/humans.txt'\n      ]\n    }\n  }\n}\n```\n\n##### Easy cache busting\n\nIn app/assets/index.html:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/css/style.css?rel=@@timestamp\">\n  <script src=\"/js/app.js?rel=@@timestamp\"></script>\n</head>\n```\n\nIn gruntfile:\n\n```javascript\nreplace: {\n  dist: {\n    options: {\n      variables: {\n        'timestamp': '<%= new Date().getTime() %>'\n      }\n    },\n    files: {\n      'build/index.html': [\n        'app/assets/index.html'\n      ]\n    }\n  }\n}\n```\n\n##### Include file contents inplace\n\nIn build/index.html:\n\n```html\n<body>\n  @@include\n</body>\n```\n\nIn gruntfile:\n\n```javascript\nreplace: {\n  dist: {\n    options: {\n      variables: {\n        'include': '<%= grunt.file.read(\"includes/content.html\") %>'\n      }\n    },\n    files: {\n      'public/': [\n        'build/index.html'\n      ]\n    }\n  }\n}\n```\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n## Release History\n\n* 2012/09/25 - v0.3.0 - general cleanup and consolidation. test refactoring. global options depreciated. revert normalize linefeeds for now.\n* 2012/09/25 - v0.3.1 - update to grunt-lib-contrib, add force flag.\n* 2012/11/20 - v0.3.2 - add new examples.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-replace@0.4.0",
  "dist": {
    "shasum": "9c9b1ba37254fb24cc416de79925dcd56ac281af"
  },
  "_from": "git://github.com/outaTiME/grunt-replace.git"
}
